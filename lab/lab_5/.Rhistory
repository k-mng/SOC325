scale_x_discrete(breaks = levels(activityplot$Time)[c(T, rep(F, 5))]) #X axis
#Make waveform plot for year comparisons (2019 v. 2020 v. 2021) ####
lightplot %>% #set correct data (light or activity)
filter(day == "Weekday") %>% #filter for day (school day or weekend)
ggplot(aes(x = Time, y = mean, group = year)) +
geom_line(aes(color = year), lwd = 2) + #Add line
geom_pointrange(aes(ymin=mean-se, ymax=mean+se, color = year), size = 0.5) +
theme_classic() +
scale_x_discrete(breaks = levels(lightplot$Time)[c(T, rep(F, 5))]) + #X axis
xlab("Clock Time") +
ylab("Illuminance (log[lux])") + #Axis set for illuminance or activity
ylim (0,4) +
labs (title = "Weekday") +
theme(axis.text.x = element_text(angle = 50, hjust = 1),
legend.title = element_blank(), legend.position=c(.88, .3), #remove legend title & adjust position on graph
legend.text=element_text(size=23), #legend text size
axis.text=element_text(size=21, color = "black"),
axis.title=element_text(size=21,face="bold", color = "black"),
plot.title = element_text(hjust = 0.5, size = 22, face = "bold"),
#legend.position = "none"
) +
scale_colour_manual(labels=c("2019", "2020", "2021"),
values=c("#009E73", "#0072B2", "#D55E00")) #color for years
November_sleep<- read_csv(here("fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
December_sleep<- read_csv(here("fitbit_data","December Sleep data - Sheet1.csv"))%>%na.omit()
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
December_sleep<- read_csv(here("data/lab_5/fitbit_data","December Sleep data - Sheet1.csv"))%>%na.omit()
January_sleep<- read_csv(here("data/lab_5/fitbit_data","January sleep data - Sheet1.csv"))%>%na.omit()
February_sleep<- read_csv(here("data/lab_5/fitbit_data","February sleep data - Sheet1 (1).csv"))%>%na.omit()
March_sleep<- read_csv(here("data/lab_5/fitbit_data","March sleep data - Sheet1.csv"))%>%na.omit()
April_sleep<- read_csv(here("data/lab_5/fitbit_data","April sleep data - Sheet1.csv"))%>%na.omit()
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
December_sleep<- read_csv(here("data/lab_5/fitbit_data","December Sleep data - Sheet1.csv"))%>%na.omit()
January_sleep<- read_csv(here("data/lab_5/fitbit_data","January sleep data - Sheet1.csv"))%>%na.omit()
February_sleep<- read_csv(here("data/lab_5/fitbit_data","February sleep data - Sheet1 (1).csv"))%>%na.omit()
March_sleep<- read_csv(here("data/lab_5/fitbit_data","March sleep data - Sheet1.csv"))%>%na.omit()
April_sleep<- read_csv(here("data/lab_5/fitbit_data","April sleep data - Sheet1.csv"))%>%na.omit()
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
December_sleep<- read_csv(here("data/lab_5/fitbit_data","December Sleep data - Sheet1.csv"))%>%na.omit()
January_sleep<- read_csv(here("data/lab_5/fitbit_data","January sleep data - Sheet1.csv"))%>%na.omit()
February_sleep<- read_csv(here("data/lab_5/fitbit_data","February sleep data - Sheet1 (1).csv"))%>%na.omit()
March_sleep<- read_csv(here("data/lab_5/fitbit_data","March sleep data - Sheet1.csv"))%>%na.omit()
April_sleep<- read_csv(here("data/lab_5/fitbit_data","April sleep data - Sheet1.csv"))%>%na.omit()
## Clean up the data
nov_clean<-November_sleep%>%mutate(
st = str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 1],
wt= str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 2],
sd=if_else(str_detect(st,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
sleep_time = as.POSIXct(paste(sd,
st),
format='%Y-%m-%d %I:%M %p'),
wd=if_else(str_detect(wt,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
wake_time = as.POSIXct(paste(wd,
wt),
format='%Y-%m-%d %I:%M %p'),
time_slept_min= difftime(wake_time,sleep_time,units="mins"),
time_slept_hour= difftime(wake_time,sleep_time,units="hour")
)
View(nov_clean)
View(November_sleep)
nov_clean%>%kbl(digits = 2) %>%
kable_styling()%>%
kable_paper("hover", full_width = F)
View(December_sleep)
December_sleep<-December_sleep%>%rename(DayOfTheWeek=DECEMBER)
## Add Flag for month
December_sleep<-December_sleep%>%mutate(
Month="December"
)
View(January_sleep)
January_sleep<-January_sleep%>%mutate(
Month="January"
)
January_sleep<-January_sleep%>%rename(DayOfTheWeek=JANUARY)
January_sleep<-January_sleep%>%mutate(
Month="January"
)
## Combine
dec_jan<-December_sleep%>%bind_rows(January_sleep)
View(dec_jan)
View(November_sleep)
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
November_sleep <- November_sleep %>%
mutate(month = "November")
ndj <- dec_jan %>%
bind_rows(November_sleep)
View(ndj)
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
November_sleep <- November_sleep %>%
mutate(Month = "November")
ndj <- dec_jan %>%
bind_rows(November_sleep)
dec_jan%>%kbl(digits = 2) %>%
kable_styling()%>%
kable_paper("hover", full_width = F)
filenames <- list.files(path=here("data/lab_5"),pattern = "\\.csv$") #Get .csv file names in directory
## Run this code, to manage packages and install as needed.
# Install pacman
if (!require("pacman")) install.packages("pacman")
# p_load function loads packages if installed, or install then loads otherwise
pacman::p_load(tidyverse,haven,lubridate,ggthemes,kableExtra,here,ggpubr,rstatix,Routliers,reshape2,Routliers,gt,ggforce,car,data.table,zoom,magrittr,zoo,infer)
filenames <- list.files(path=here("data/lab_5"),pattern = "\\.csv$") #Get .csv file names in directory
filenames<-filenames[-1]
#Combine data frame with all .csv files data
df<- lapply(here("data/lab_5",filenames), fread) %>%
set_names(filenames) %>%
rbindlist(idcol = "subjectid") #set column with identifier (subject id)
df$subjectid <- substr(df$subjectid,8,9) #make subjectid column into correct number
#Set subject ID as correct year
#If error "column 1 of item 22 does not match with column 1 of item 1"
#Go into file (in excel) named and format data the same as other files
df <- df %>% mutate(year =
case_when(subjectid <= 10 ~ "2019",
subjectid >=25 & subjectid <=49 ~ "2020",
subjectid >= 50 ~ "2021"))
#make subject, year, and day a factor
df$subjectid <- as.factor (df$subjectid)
df$day <- as.factor (df$day)
df$year <- as.factor(df$year)
#Make time into date/time format
df$Time <- as.POSIXct(df$Time, format="%H:%M:%S", tz = "America/Los_Angeles" )
df$Time <- strftime(df$Time, format="%H:%M")
#Alter data for running average #####
#Log of data (activity and light) + 1 - to not have N/A for zeros (for every individual file)
df$White.Light <- log(df$White.Light+1)
#rolling average for activity in light added to columns (grouped by subject)
df <- df %>%
group_by(subjectid) %>%
dplyr::mutate(meanactivity = rollmean(Activity, k = 6, fill = NA),
loglight = rollmean(White.Light , k = 6, fill = NA))
#Mean for each time point seperated by subject (one point for each subject at each timepoint) ####
activity <- df %>%
group_by(subjectid, Time, day, year) %>%
dplyr::summarize(activity = mean(meanactivity, na.rm=TRUE)) #School day activity
light <- df %>%
group_by(subjectid, Time, day, year) %>%
dplyr::summarize(light = mean(loglight, na.rm=TRUE)) #weekend activity
#Mean for each timepoint seperated by day (one point per timepoint) ####
#Change time to a factor
activity$Time <- as.factor(activity$Time)
light$Time <- as.factor(light$Time)
#Change format of dataframe for saving file ####
activity_file <- activity %>%
pivot_wider(names_from = subjectid, values_from = activity)
light_file <- light %>%
pivot_wider(names_from = subjectid, values_from = light)
#Summarize activity data
activityplot <- activity %>%
group_by(Time, year, day) %>%
get_summary_stats(activity, type = "mean_se")
#summarize light data
lightplot <- light %>%
group_by(Time, year, day) %>%
get_summary_stats(light, type = "mean_se")
#Alter data for plotting #####
#Change Time column factor levels, so graph is plotted 16:00pm - 15:50pm
#Using row numnbers
activityplot$Time <- factor(activityplot$Time, levels(activityplot$Time)[c(97:144,1:96)])
lightplot$Time <- factor(lightplot$Time, levels(lightplot$Time)[c(97:144,1:96)])
level <- as.data.frame(levels (lightplot$Time)) #check that levels are correct
#Make waveform plot for DAY comparisons (School day v. weekend) ####
#Create wave forms
lightplot %>% #set correct data (light or activity)
filter(year == "2019") %>% #filter for year
ggplot(aes(x = Time, y = mean, group = day)) +
geom_line(aes(color = day), lwd = 1) + #Add line
geom_pointrange(aes(ymin=mean-se, ymax=mean+se, color = day), size = 0.5) +
theme_classic() +
xlab("Clock Time") +
ylab("Illuminance (log [lux])") + #Axis title set for illuminance or activity
ylim (0,4) + #y axis scale
theme(axis.text.x = element_text(angle = 50, hjust = 1),
legend.title = element_blank(), legend.position=c(.88, .3), #remove legend title & adjust position on graph
legend.text=element_text(size=18), #legend text size
axis.text=element_text(size=18, color = "black"),
axis.title=element_text(size=18,face="bold", color = "black"),
#legend.position="none",
strip.text = element_text(size = 18),
plot.title = element_text(hjust = 0.5, size = 22, face = "bold")) +
scale_color_manual(values=c("#E69F00", "#56B4E9")) + #colors for School day vs weekend
labs (title = "2019") +
scale_x_discrete(breaks = levels(activityplot$Time)[c(T, rep(F, 5))]) #X axis
#Make waveform plot for year comparisons (2019 v. 2020 v. 2021) ####
lightplot %>% #set correct data (light or activity)
filter(day == "Weekday") %>% #filter for day (school day or weekend)
ggplot(aes(x = Time, y = mean, group = year)) +
geom_line(aes(color = year), lwd = 2) + #Add line
geom_pointrange(aes(ymin=mean-se, ymax=mean+se, color = year), size = 0.5) +
theme_classic() +
scale_x_discrete(breaks = levels(lightplot$Time)[c(T, rep(F, 5))]) + #X axis
xlab("Clock Time") +
ylab("Illuminance (log[lux])") + #Axis set for illuminance or activity
ylim (0,4) +
labs (title = "Weekday") +
theme(axis.text.x = element_text(angle = 50, hjust = 1),
legend.title = element_blank(), legend.position=c(.88, .3), #remove legend title & adjust position on graph
legend.text=element_text(size=23), #legend text size
axis.text=element_text(size=21, color = "black"),
axis.title=element_text(size=21,face="bold", color = "black"),
plot.title = element_text(hjust = 0.5, size = 22, face = "bold"),
#legend.position = "none"
) +
scale_colour_manual(labels=c("2019", "2020", "2021"),
values=c("#009E73", "#0072B2", "#D55E00")) #color for years
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
## Run this code, to manage packages and install as needed.
# Install pacman
if (!require("pacman")) install.packages("pacman")
# p_load function loads packages if installed, or install then loads otherwise
pacman::p_load(tidyverse,haven,lubridate,ggthemes,kableExtra,here,ggpubr,rstatix,Routliers,reshape2,Routliers,gt,ggforce,car,data.table,zoom,magrittr,zoo,infer)
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
November_sleep<- read_csv(here("data/lab_5/fitbit_data","November Sleep Data - Sheet1.csv"))%>%na.omit()
December_sleep<- read_csv(here("data/lab_5/fitbit_data","December Sleep data - Sheet1.csv"))%>%na.omit()
January_sleep<- read_csv(here("data/lab_5/fitbit_data","January sleep data - Sheet1.csv"))%>%na.omit()
February_sleep<- read_csv(here("data/lab_5/fitbit_data","February sleep data - Sheet1 (1).csv"))%>%na.omit()
March_sleep<- read_csv(here("data/lab_5/fitbit_data","March sleep data - Sheet1.csv"))%>%na.omit()
April_sleep<- read_csv(here("data/lab_5/fitbit_data","April sleep data - Sheet1.csv"))%>%na.omit()
## Clean up the data
nov_clean<-November_sleep%>%mutate(
st = str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 1],
wt= str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 2],
sd=if_else(str_detect(st,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
sleep_time = as.POSIXct(paste(sd,
st),
format='%Y-%m-%d %I:%M %p'),
wd=if_else(str_detect(wt,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
wake_time = as.POSIXct(paste(wd,
wt),
format='%Y-%m-%d %I:%M %p'),
time_slept_min= difftime(wake_time,sleep_time,units="mins"),
time_slept_hour= difftime(wake_time,sleep_time,units="hour")
)
nov_clean%>%kbl(digits = 2) %>%
kable_styling()%>%
kable_paper("hover", full_width = F)
## Check histogram of the data
nov_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
nov_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(NOVEMBER)))+
geom_point()+
theme_bw()
## Check linear relationship between time slept and sleep scor
nov_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check linear relationship between time slept and sleep score
## Log-Log plot
nov_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
scale_y_log10()+
scale_x_log10()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Rename DECEMBER/JANUARY Column
December_sleep<-December_sleep%>%rename(DayOfTheWeek=DECEMBER)
## Add Flag for month
December_sleep<-December_sleep%>%mutate(
Month="December"
)
## Do same for January
January_sleep<-January_sleep%>%rename(DayOfTheWeek=JANUARY)
January_sleep<-January_sleep%>%mutate(
Month="January"
)
## Combine
dec_jan<-December_sleep%>%bind_rows(January_sleep)
November_sleep <- November_sleep %>%
rename(DayOfTheWeek = NOVEMBER)
November_sleep <- November_sleep %>%
mutate(Month = "November")
ndj <- dec_jan %>%
bind_rows(November_sleep)
dec_jan%>%kbl(digits = 2) %>%
kable_styling()%>%
kable_paper("hover", full_width = F)
ndj%>%kbl(digits = 2) %>%
kable_styling()%>%
kable_paper("hover", full_width = F)
## Check that it makes sense
## Check Correlations between Sleep Score and Hourse Slept
nov_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(NOVEMBER)-1,data=nov_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(NOVEMBER)-1,data=nov_clean))
ndj%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
View(ndj)
View(nov_clean)
## Check histogram of the data
ndj%>%
ggplot(aes(x=as.numeric("HOURS OF SLEEP")))+
geom_histogram()+
theme_bw()
# Clean up data
ndj_clean<-ndj%>%mutate(
st = str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 1],
wt= str_split(`SLEEP TIME`," - ",simplify=TRUE)[, 2],
sd=if_else(str_detect(st,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
sleep_time = as.POSIXct(paste(sd,
st),
format='%Y-%m-%d %I:%M %p'),
wd=if_else(str_detect(wt,"am"),as.Date(DATE,"%m/%d/%Y")+1,as.Date(DATE,"%m/%d/%Y")),
wake_time = as.POSIXct(paste(wd,
wt),
format='%Y-%m-%d %I:%M %p'),
time_slept_min= difftime(wake_time,sleep_time,units="mins"),
time_slept_hour= difftime(wake_time,sleep_time,units="hour")
)
View(ndj_clean)
ndj_clean%>%
ggplot(aes(x=as.numeric("HOURS OF SLEEP")))+
geom_histogram()+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(NOVEMBER)))+
geom_point()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(Month)))+
geom_point()+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(Month)))+
geom_point()+
theme_bw()
## Check linear relationship between time slept and sleep scor
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check linear relationship between time slept and sleep score
## Log-Log plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
scale_y_log10()+
scale_x_log10()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(Month)))+
geom_point()+
theme_bw()
## Check linear relationship between time slept and sleep scor
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check linear relationship between time slept and sleep score
## Log-Log plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
scale_y_log10()+
scale_x_log10()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check that it makes sense
## Check Correlations between Sleep Score and Hourse Slept
nov_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(NOVEMBER)-1,data=nov_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(NOVEMBER)-1,data=nov_clean))
## Check Correlations between Sleep Score and Hourse Slept
ndj_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
View(nov_clean)
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check that it makes sense
## Check Correlations between Sleep Score and Hourse Slept
nov_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(NOVEMBER)-1,data=nov_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(NOVEMBER)-1,data=nov_clean))
## Check Correlations between Sleep Score and Hours Slept
ndj_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(DayOfTheWeek)))+
geom_point()+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(DayOfTheWeek)))+
geom_point()+
theme_bw()
## Check linear relationship between time slept and sleep scor
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check linear relationship between time slept and sleep score
## Log-Log plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
scale_y_log10()+
scale_x_log10()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check histogram of the data
ndj_clean%>%
ggplot(aes(x=as.numeric(time_slept_hour)))+
geom_histogram()+
theme_bw()
## Check Scatter plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`,color=as.factor(DayOfTheWeek)))+
geom_point()+
theme_bw()
## Check linear relationship between time slept and sleep scor
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check linear relationship between time slept and sleep score
## Log-Log plot
ndj_clean%>%
ggplot(aes(y=as.numeric(time_slept_hour),x=`SLEEP SCORE`))+
geom_point()+
scale_y_log10()+
scale_x_log10()+
geom_smooth(method="lm",formula='y ~ x')+
theme_bw()
## Check Correlations between Sleep Score and Hours Slept
ndj_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check Correlations between Sleep Score and Hours Slept
ndj_clean%>%summarise(cor=cor(`SLEEP SCORE`,as.numeric(time_slept_hour),use="na.or.complete"))
## Check the linear relationship between Day of the week and
#### sleep score
summary(lm(`SLEEP SCORE`~as.character(DayOfTheWeek)-1,data=ndj_clean))
## Check the linear relationship between Day of the week and
#### hours slept
summary(lm(as.numeric(time_slept_hour)~as.character(DayOfTheWeek)-1,data=ndj_clean))
