count_in_location("Snohomish")
str_sub(locations, -2, -2)
str_sub(locations, -2, -1)
states <- str_sub(locations, -2, -1)
unique(states, incomparables = FALSE)
unique(toupper(states, incomparables = FALSE))
unique(states, incomparables = FALSE)
states <- toupper(str_sub(locations, -2, -1))
toupper(str_sub(locations, -2, -1))
unique(states, incomparables = FALSE)
un_states<- unique(states, incomparables = FALSE)
length(un_states)
states[states == "ce"]
states[states == "CE"]
frame_states <- data.frame(states, stringsAsFactors = FALSE)
View(frame_states)
states[states == "te"]
states[states == "TE"]
length(un_states)
un_states<- unique(states[-27126], incomparables = FALSE)
length(un_states)
un_states<- unique(states[-27126, -2300], incomparables = FALSE)
un_states<- unique(states[-2300, -27126], incomparables = FALSE)
length(un_states)
un_states<- unique(states[-2300 & -27126], incomparables = FALSE)
length(un_states)
length(un_states)
un_states<- unique(states[-2300 & -27126], incomparables = FALSE)
un_states<- unique(states[-2300, -27126], incomparables = FALSE)
un_states<- unique(states[c(-2300, -27126)], incomparables = FALSE)
length(un_states)
pre_states <- toupper(str_sub(locations, -2, -1))
states <- pre_states[c(-2300, -27126)]
un_states<- unique(states, incomparables = FALSE)
length(un_states)
rm(frame_states)
count_in_location("Snohomish")
lapply(un_states, count_in_location)
count_in_location("WA")
is.vector(un_states)
is.data.frame(un_states)
is.list(un_states)
sapply(un_states, count_in_location)
sapply(un_states, count_in_location, simplify = TRUE)
sapply(un_states, count_in_location, simplify = FALSE)
sapply(un_states, count_in_location, simplify = FALSE)
sapply(un_states, count_in_location, simplify = TRUE)
s_states <- sapply(un_states, count_in_location, simplify = TRUE)
s_states[1]
s_states[MD]
s_states <- sapply(un_states, count_in_location, simplify = FALSE)
s_states[MD]
s_states$MD
s_states <- sapply(un_states, count_in_location, simplify = TRUE)
s_states$MD
s_states <- sapply(un_states, count_in_location, simplify = FALSE)
View(s_states)
is.vector(s_states)
s_states <- sapply(un_states, count_in_location, simplify = TRUE)
is.vector(s_states)
s_states <- sapply(un_states, count_in_location)
is.vector(s_states)
table(states)
state_table <- table(states)
View(state_table)
is.data.frame(state_table)
is.table(state_table)
max(state_table)
dates <- as.Date(protests$Date)
View(dates)
max(dates)
min(dates)
most_recent <- max(dates)
earliest <- min(dates)
most_recent - earliest
time_span <- most_recent - earliest
print(time_span)
true_2020 <- str_detect(dates, "2020", negate = FALSE)
in_2020 <- dates[true_2020]
View(in_2020)
length(in_2020)
true_2019 <- str_detect(dates, "2019", negate = FALSE)
in_2019 <- dates[true_2019]
is.vector(in_2019)
is.vector(in_2020)
length(in_2020)
is.vector(dates)
is.data.frame(dates)
is.list(dates)
in_2020:in_2019
length(in_2020):length(in_2019)
length(in_2020)/length(in_2019)
ratio_2020_2019 <- length(in_2020)/length(in_2019)
count_on_date <- function(date) {
true_date <- str_detect(dates, date, negate = FALSE)
in_date <- dates[true_date]
N <- length(in_date)
statement <- paste0("There were ", N, " protests on ", date, ".")
return(statement)
}
count_on_date(2021-01-06)
count_on_date("2021-01-06")
count_on_date("2021-Jan-06")
count_on_date <- function(date) {
true_date <- str_detect(dates, date, negate = FALSE)
in_date <- dates[true_date]
N <- length(in_date)
if (N > 0) {
statement <- paste0("There were ", N, " protests on ", date, ".")
} else {
statement <- paste0("No protests found on ", date, ". Please format date as YYYY/MM/DD.")
}
return(statement)
}
count_on_date("2021-Jan-06")
count_on_date("2021-01-06")
count_on_date <- function(date) {
true_date <- str_detect(dates, date, negate = FALSE)
in_date <- dates[true_date]
N <- length(in_date)
if (N > 0) {
statement <- paste0("There were ", N, " protests on ", date, ".")
} else {
statement <- paste0("No protests found on ", date, ". Please format date as YYYY-MM-DD.")
}
return(statement)
}
count_on_date("2021-01-06")
count_on_date("2021-Jan-06")
months(in_2020)
length(in_2020)
table(months(in_2020))
by_month_table <- table(months(in_2020))
View(by_month_table)
View(by_month_table)
by_month_table_2019 <- table(months(in_2019))
change_july_protests <- abs(by_month_table[6] - by_month_table_2019[6])
#purpose of protests
protests$Event..legacy..see.tags.
purpose <- protests$Event..legacy..see.tags.
uniq_purpose <- unique(purpose, incomparables = FALSE)
purpose[uniq_purpose]
lenght(uniq_purpose)
length(uniq_purpose)
unique(purpose, incomparables = FALSE)
num_purposes <- length(uniq_purpose)
# 5a: Extract the `Event..legacy..see.tags.` column into a variable called `purpose`.
#
#    *CONSIDER:* The name of this column, "Event..legacy..see.tags.", is very odd. Why?
#    What can be learned from this column name? (Variable: `purpose`)
purpose <- protests$Event..legacy..see.tags.
# 5b: How many different purposes are listed in the dataset? (Variable: `num_purposes`)
num_purposes <- length(unique(purpose, incomparables = FALSE))
# 4a: Extract the `Date` column into a variable called `dates` by passing the
#    column to the `as.Date()` function. (Note: The `as.Date()` function will
#    process the values as dates, which are *fortunately* already in an optimal
#    format for parsing.) (Variable: `dates`)
dates <- as.Date(protests$Date)
# 4b: What is the most recent date in the dataset? (Variable: `most_recent`)
most_recent <- max(dates)
# 4c: What is the earliest date in the dataset? (Variable: `earliest`)
earliest <- min(dates)
# 4d: What is the length of the time span of the dataset? (Hint: R can do math with
#    dates pretty well by default!) (Variable: `time_span`)
time_span <- most_recent - earliest
# 4e: Create a vector of the dates that are in 2020. (Variable: `in_2020`)
true_2020 <- str_detect(dates, "2020", negate = FALSE)
#                                         Note 03.
# 1a: Load the `stringr` package, which you will use later.
library(stringr)
log_attendees_distribution <- boxplot(num_attendees, log = "y")
count_in_location <- function(location) {
true_location <- str_detect(locations, location, negate = FALSE)
N <- length(true_location[true_location == TRUE])
if (N > 0) {
statement <- paste0("There were ", N, " protests in ", toupper(location), ".")
}
else {
statement <- paste0("Location (", toupper(location), ") not found.")
}
return(statement)
}
#    Notes:
#       1. Pay careful attention to spa
dc_summary <- count_in_location("Washington, DC")
# 3a: Extract the `Location` column. (Variable: `locations`)
locations <- protests$Location
# 3b: How many *unique* locations are in the dataset? (Variable: `num_locations`)
num_locations <- unique(locations, incomparables = FALSE)
true_wa <- str_detect(locations, "WA", negate = FALSE)
num_in_wa <- length(true_wa[true_wa == TRUE])
# 3d: What proportion of protests occurred in Washington? (Variable: `prop_in_wa`)
prop_in_wa <- round((num_in_wa/length(locations) * 100), 2)
#                                         Note 09.
#     *R3a: REFLECTION:* Does the number of protests in Washington surprise you?
#     Why or why not?
# 3e: Write a function `count_in_location()` that accepts one parameter:
#        `location` - which is the possible location of a protest
#
#    The function should return exactly this sentence:
#       "There were N protests in LOCATION."
#
#    If the `location` is not in the dataset, the function should return
#        "Location (LOCATION) not found."
#
#    In these two sentences:
#        N is the number of protests that occurred at that location; and
#        LOCATION is the function's parameter.
count_in_location <- function(location) {
true_location <- str_detect(locations, location, negate = FALSE)
N <- length(true_location[true_location == TRUE])
if (N > 0) {
statement <- paste0("There were ", N, " protests in ", toupper(location), ".")
}
else {
statement <- paste0("Location (", toupper(location), ") not found.")
}
return(statement)
}
#    Notes:
#       1. Pay careful attention to spaces and punctuation in the sentences.
#       2. You should count the number of locations that *match* the `location'
#          parameter. For example, `Seattle` should be a match for "Seattle, WA". (Variable: `count_in_location`)
# 3f: Use your function above to compute the number of protests in "Washington, DC". (Variable: `dc_summary`)
dc_summary <- count_in_location("Washington, DC")
# 3g: Use your function above to compute the number of protests in "Minneapolis". (Variable: `minneapolis_summary`)
minneapolis <- count_in_location("Minneapolis")
# 3h: Use your function above to demonstrate that it works correctly for a
#    location that is not in the data set. (Variable: `missing_summary`)
missing_summary <- count_in_location("Vietnam")
# 3i: Create a new vector `states` that holds the state locations, that is, the
#    last two characters of each value in the `locations` vector. (Hint: You may
#    want to again use a function from the `stringr` package
#    Check, for example, the `str_sub()` function.) (Variable: `states`)
pre_states <- toupper(str_sub(locations, -2, -1))
states <- pre_states[c(-2300, -27126)]
minneapolis
dc_summary
length(states)
length(uniq_states)
# 3j: Create a vector of the unique states in your dataset. (Variable: `uniq_states`)
uniq_states <- unique(states, incomparables = FALSE)
length(uniq_states)
is.vector(uniq_states)
is.vector(uniq_states)
is.factor(uniq_states)
get_purposes <- function(){
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
return(answer)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes()
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes
uniq_purpose
get_purposes <- function(){
uniq_purpose <- unique(purpose, incomparables = FALSE)
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
return(answer)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
uniq_purpose <- unique(purpose, incomparables = FALSE)
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
answer
return(answer)
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes
get_purposes <- function{
get_purposes <- function {
#    (https://stringr.tidyverse.org/). To do so, you will need to write a regular
#    expression that matches " (blah blah)" and replaces it with the empty string (`""`).
#    Note: The space before the left parenthesis needs to be matched too.
#
#    Write a function, `get_purposes()`, that returns a vector of high-level
#    purposes. Your function will take no parameters.
#
#    To solve this problem, you might do a web search and/or find an introduction
#    to regular expressions and R. Take your time. You will likely need to do some
#    thoughtful trial and error. (Variable: `get_purposes`)
get_purposes <- function () {
uniq_purpose <- unique(purpose, incomparables = FALSE)
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
return(answer)
}
answer
get_purposes()
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
get_purposes()
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(high_level_purpose)
num_high_level
get_purposes <- function () {
answer <- unique(str_replace(uniq_purpose, " \\(.*\\)", ""))
return(answer)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
high_level_purpose
get_purposes <- function () {
answer <- str_replace(purpose, " \\(.*\\)", "")
return(answer)
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
high_level_purpose
high_level_purpose
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
high_level_purpose
get_purposes
get_purposes <- function () {
answer <- str_replace(purpose, " \\(.*\\)", "")
return(answer)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
get_purposes()
high_level_purpose
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(high_level_purpose)
num_high_level
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(unique(high_level_purpose))
num_high_level
# 5f: Use the table() function to count the number of protests for each high level purpose. (Variable: `high_level_table`)
high_level_table <- table(high_level_purpose)
high_level_table
View(high_level_table)
View(protests)
filter_positions <- function(purpose, position_taken = NULL) {
true_purpose <- str_detect(protests$Event..legacy..see.tags., purpose, negate = FALSE)
list_purpose <- protests[true_purpose, ]
if(is.null(position_taken)) {
data_frame <- as.data.frame(list_purpose, row.names = NULL, stringsAsFactor = FALSE)
} else {
true_tag <- str_detect(list_purpose$Tags, position_taken, negate = FALSE)
list_tag <- list_purpose[true_tag, ]
data_frame <- as.data.frame(list_tag, row.names = NULL, stringsAsFactor = FALSE)
}
return(View(data_frame))
}
filter_positions("Environment", "noise")
filter_positions("Healthcare")
write_report()
write_report()
getwd()
filter_positions("Environment", "noise")
View(state_table)
state_table <- table(states)
View(state_table)
# 5b: How many different purposes are listed in the dataset? (Variable: `num_purposes`)
num_purposes <- length(unique(purpose, incomparables = FALSE))
num_purposes
get_purposes <- function () {
answer <- str_replace(purpose, " \\(.*\\)", "")
return(answer)
}
get_purposes
high_level_purpose
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(unique(high_level_purpose))
# 5f: Use the table() function to count the number of protests for each high level purpose. (Variable: `high_level_table`)
high_level_table <- table(high_level_purpose)
high_level_table
#                                         Note 15.
#     *CONSIDER:* Use View() to examine your `high_level_table` variable. What
#     picture does this paint of the U.S.?
View(high_level_table)
getwd()
rm(ls())
ls()
ls(all)
rm(ls
rm(ls)
rm(envir)
rm(envir = as.environment(pos))
rm(list - ls())
rm(list = ls())
install.packages("dplyr")
library("dplyr")
install.packages("pscl")
install.packages("dplyr")
library("dplyr")
install.packages("pscl")
library("pscl")
View(presidentialElections)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
rm(ls())
ls()
ls(1:39)
rm(list = ls())
library(tidyr)
install.packages("tidyr")
wb_data <- read.csv(
"data/world_bank_data.csv",
stringsAsFactors = F,
skip = 4
)
truth <- function (adjective, number, body) {
statement <- paste0("ur mom is very ", adjective, ". I think it's because she eats", number, "tons of ", body, "every day! Ew!!!!")
return(statement)
}
truth("slimy", 5, "feet")
truth <- function (adjective, number, body) {
statement <- paste0("ur mom is very ", adjective, ". I think it's because she eats ", number, " tons of ", body, " every day! Ew!!!!")
return(statement)
}
truth("slimy", 5, "feet")
source("app_ui.R")
shiny::runApp('C:/Users/kmngu/Desktop/project-team-1')
library(dplyr)
library(ggplot2)
getwd()
setwd(Desktop)
setwd(c:/Users/kmngu/Desktop)
setwd("~/")
setwd("C:/Users/kmngu/Desktop")
setwd("C:/Users/kmngu/Desktop/SOC-325-R")
setwd(/SOC-325-R/lab)
setwd(lab)
setwd(Users/kmngu/Desktop/SOC-325-R/Lab)
setwd("C:/Users/kmngu/Desktop/SOC-325-R/Lab")
setwd("C:/Users/kmngu/Desktop/SOC-325-R")
new_object <- c(4,9,16,25,36)
sqrt(new_object)
read.csv(/data/listings.csv.gz)
read.csv(data/listings.csv.gz)
read.csv(data/listings.csv)
read.csv(data\listings.csv)
read.csv(C:\\Users\\kmngu\\Desktop\\SOC-325-R\\data\\listings.csv)
read.csv(C:/Users\\kmngu\\Desktop\\SOC-325-R\\data\\listings.csv)
read.csv(C:Users\\kmngu\\Desktop\\SOC-325-R\\data\\listings.csv)
read.csv(C:Users/kmngu\\Desktop\\SOC-325-R\\data\\listings.csv)
read.csv(C:Users/kmngu/Desktop/SOC-325-R/data/listings.csv)
read.csv(C:/Users/kmngu/Desktop/SOC-325-R/data/listings.csv)
airbnb <- read.csv("data/listings.csv")
airbnb <- read.csv("data/listings.csv.gz")
airbnb <- read.csv("data/listings.csv")
airbnb <- read.csv("data/listings.csv.csv")
getwd()
airbnb <- read.csv("/data/listings.csv")
getwd()
airbnb <- read.csv("data/listings.csv")
airbnb <- read.csv("data/listings.csv")
rm(ls())
rm(airbnb)
airbnb <- read.csv("data/listings.csv")
View(airbnb)
rm(new_object)
source("Lab/lab-1.R")
source("Lab/lab-1.R")
getwd()
setwd("C:/Users/kmngu/Desktop/SOC-325-R/Lab")
setwd("C:/Users/kmngu/Desktop/SOC-325-R/Lab")
setwd("C:/Users/kmngu/Desktop/SOC-325-R")
source("Lab/lab-1.R")
getwd()
setwd("C:/Users/kmngu/Desktop/SOC-325-R")
getwd()
source("lab-1.R")
source("lab-1.R")
source("lab-1.R")
airbnb <- read.csv(listings.csv)
getwd()
airbnb <- read.csv("listings.csv")
View(airbnb)
airbnb2 <- read.csv("data/listings.csv")
file.exists("data/listings.csv")
file.exists("listings.csv")
file.exists(listings.csv)
file.exists("/data/listings.csv")
file.exists("/data/listings.csv.csv")
file.exists("~/data/listings.csv.csv")
getwd()
file.exists("../data/listings.csv.csv")
getwd()
setwd("C:/Users/kmngu/Desktop/SOC-325-R/data")
file.exists("listings.csv.csv")
file.exists("listings.csv")
file.exists("/data/listings.csv")
file.exists("data/listings.csv")
setwd("C:/Users/kmngu/Desktop/SOC-325-R")
airbnb2 <- read_csv("data/listings.csv")
library(readr)
listings <- read_csv("data/listings.csv")
View(listings)
airbnb2 <- read.csv("data/listings.csv")
airbnb2 <- read_csv("data/listings.csv")
airbnb2 <- read_csv("../data/listings.csv")
airbnb2 <- read_csv("../data/listings.csv")
airbnb2 <- read.csv("../data/listings.csv")
airbnb2 <- read.csv("../data/listings.csv")
# bc the markdown is in the Lab folder, we have to go back
airbnb <- read.csv("../data/listings.csv")
rm(listings)
rm(airbnb2)
head(airbnb)
head(airbnb)
head(airbnb)
View(airbnb)
colnames(airbnb)
length(airbnb)
nrows(airbnb)
library(dplyr)
nrows(airbnb)
nrow(airbnb)
