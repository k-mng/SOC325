testing <- nyc_full
testing <- testing[complete.cases(testing), ]
View(testing)
testing <- nyc_full %>%
select(total_pop, city)
library(dplyr)
testing <- nyc_full %>%
select(total_pop, city)
testing <- testing[complete.cases(testing), ]
testing <- testing %>%
group_by(city) %>%
summarize(nrow(city))
testing <- testing %>%
group_by(city) %>%
summarize(total = nrow(city))
testing <- nyc_full %>%
select(total_pop, city)
testing <- testing[complete.cases(testing), ]
testing <- testing %>%
group_by(city) %>%
summarize(total = nrow(city))
testing <- nyc_full %>%
select(total_pop, city)
testing <- testing[complete.cases(testing), ]
testing <- testing %>%
group_by(city) %>%
summarize(total = nrow(city),
total_pop = max(total_pop))
testing <- testing %>%
group_by(city) %>%
summarize(total = nrow(),
total_pop = max(total_pop))
summary <- testing %>%
group_by(city) %>%
summarize(total = nrow(),
total_pop = max(total_pop))
testing <- nyc_full %>%
select(total_pop, city)
testing <- testing[complete.cases(testing), ]
summary <- testing %>%
group_by(city) %>%
summarize(total = nrow(),
total_pop = max(total_pop))
summary <- testing %>%
group_by(city) %>%
summarize(total = nrow(testing),
total_pop = max(total_pop))
View(summary)
summary <- testing %>%
group_by(city) %>%
summarize(total = n(city),
total_pop = max(total_pop))
summary <- testing %>%
group_by(city) %>%
summarize(total = n(),
total_pop = max(total_pop))
summary <- testing %>%
group_by(city) %>%
summarize(airbnb = n(),
total_pop = max(total_pop))
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop)
```{r message = FALSE}
# Select the columns you need to work with
total_airbnb <- nyc_full %>%
select(id, city, total_pop)
# Remove all rows that have NA
total_airbnb <- total_airbnb[complete.cases(total_airbnb), ]
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop)
View(total_airbnb)
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop = max(total_pop))
View(total_airbnb)
View(total_airbnb)
print(total_airbnb)
# Select the columns you need to work with
total_airbnb <- nyc_full %>%
select(id, city, total_pop)
# Remove all rows that have NA
total_airbnb <- total_airbnb[complete.cases(total_airbnb), ]
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop = max(total_pop)) # there were multiple population counts listed for the same city, so I just limited it to the most populated
print(total_airbnb)
rm(list = ls())
numbers <- c(10, 22, 27, 19, 20)
27*(38-17)
log(14^7)
sqrt(436/12)
e <- seq(0, 10, length=5)
e # looks like it lists 5 evenly spaced numbers between 0 and 10
b <- seq(87, 56)
b
b[c(19,20,21)]
# I know you technically don't need the = TRUE, but it's been awhile since
# I've worked with R so I'm just practicing for now!
sum(b)
median(b)
sd(b)
library("R.utils")
# gunzip("../data/listings.csv.gz")
# bc the markdown is in the Lab folder, we have to go back
airbnb <- read.csv("../data/listings.csv")
library(knitr)
kable(airbnb[1, ], caption = "First Row of AirBNB dataset")
library(tidyverse)
# use columns "neighborhood" and "host_neighborhood"
# using dplyr
library(dplyr)
library(stringr)
place_host <- airbnb %>%
select(neighbourhood_cleansed, host_neighbourhood, host_id, host_name, host_listings_count)
place_host <- replace(place_host, place_host == '', NA) # added NA to all blank cells
place_host <- place_host[complete.cases(place_host), ] # removed all rows with NA so that there's no false result
# evaluating whether the host lives in the same city as their listing with a new column
place_host <- place_host %>%
mutate(same_city = (neighbourhood_cleansed == host_neighbourhood))
# This variable will contain the TRUE results of hosts who live in AT LEAST ONE of their listings
total_true_listing <- place_host %>%
# Filter rows so that only TRUE shows
filter(same_city == TRUE)  %>%
# Group_by column "host_listings_count" so that it doesn't lose the column
group_by(host_listings_count) %>%
# summarize to only unique "host_id" so that there's no extra data when calculating mean
summarize(unique(host_id))
# This variable will contain the FALSE results for hosts who DO NOT LIVE in the neighborhood of their listings
# Will be a little bit moore difficult because we are removing all unique(host_id) that contain one TRUE
total_false_listing <- place_host %>%
#group_by so that we don't lose the columns
group_by(host_id, host_listings_count) %>%
# summarize to find the number of TRUES in column "same_city"; will create another column
summarize(sum(same_city)) %>%
# renamed it for easier typing
rename("to_remove" = "sum(same_city)") %>%
# filter so that the "to_remove" column only has results of 0 (because if a host_id has a 0, it means that the host_id does NOT live in any of their listings' neighborhoods)
filter(to_remove == 0)
nyc <- read.csv("../data/nyc_airbnb_census_data.csv")
# select pricing and prop_white columns
nyc <- nyc %>%
select(prop_white, price)
# make the scatter plot
nyc_scatter <- nyc %>%
ggplot(aes(prop_white, # x value
price)) + geom_point() # y value + scatter POINT
# rename axis and add a title
nyc_scatter <- nyc_scatter + labs(
title = "Price of AirBNB vs. Prop. of White People in Population",
y = "Price of AirBNB",
x = "Proportion of White People in Population"
)
print(nyc_scatter)
nyc_full <- read.csv("../data/nyc_airbnb_census_data.csv")
# select relevant variables
data_boxplot <- nyc_full %>%
select(modal_race, price)
# remove all NA rows
data_boxplot <- data_boxplot[complete.cases(data_boxplot), ]
# make the boxplot
nyc_boxplot <- data_boxplot %>%
ggplot(aes(modal_race, # x value
price, # y value
)) + geom_boxplot() +
stat_summary(fun = "mean")
# rename axis and add a title
nyc_boxplot <- nyc_boxplot + labs(
title = "Price of AirBNB vs. Dominant Race in Area",
y = "Price of AirBNB",
x = "Dominant Race in Area"
)
print(nyc_boxplot)
print(nyc_boxplot + ylim(0,300))
# Select the columns you need to work with
total_airbnb <- nyc_full %>%
select(city, total_pop)
# Remove all rows that have NA
total_airbnb <- total_airbnb[complete.cases(total_airbnb), ]
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop = max(total_pop)) # there were multiple population counts listed for the same city, so I just limited it to the most populated
print(total_airbnb)
getwd()
[By State](img/state_covid.jpg)
"~Desktop/SOC-325-R/img/state_covid.jpg"
![By State](../img/state_covid.jpg)
path.expand("~Desktop/SOC-325-R/img/state_covid.jpg")
library(nycflights13)
View(head(flights))
(head(flights))
head(planes)
head(airlines)
library(nycflights13)
(head(flights))
head(planes)
head(airlines)
library(nycflights13)
(head(flights))
head(planes)
head(airlines)
# Select specific columns in Flights data set so it's easier to see
flights2 <- flights %>%
select(carrier, origin, dest)
View(flights2)
"~Desktop/SOC-325-R/img/state_covid.jpg"
View(airlines)
View(flights)
View(airports)
# Full join both data frames so no information is accidentally lost
sea_manu <- full_join(flights2, planes, by = "tailnum")
# Select specific columns in Flights data set so it's easier to see
flights2 <- flights %>%
select(tailnum, origin, dest)
# Full join both data frames so no information is accidentally lost
sea_manu <- full_join(flights2, planes, by = "tailnum")
View(sea_manu)
View(planes)
planes2 <- planes %>%
select(tailnum, manufacturer, model)
# Full join both data frames so no information is accidentally lost
sea_manu <- full_join(flights2, planes2, by = "tailnum")
View(planes2)
head(sea_manu)
# Select specific columns in Flights data set so it's easier to see
flights2 <- flights %>%
select(tailnum, origin, dest)
planes2 <- planes %>%
select(tailnum, manufacturer, model)
# Full join both data frames so no information is accidentally lost
sea_manu <- full_join(flights2, planes2, by = "tailnum")
head(sea_manu)
# remove all NA rows
sea_manu <- sea_manu[complete.cases(sea_manu), ]
head(sea_manu)
# Filter data frame to only show dest = SEA
sea_manu <- sea_manu %>%
filter(dest = "SEA")
# Filter data frame to only show dest = SEA
sea_manu <- sea_manu %>%
filter(dest == "SEA")
# Group_by manufacturer, then count the times that manufacturer occurs
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n())
# Group_by manufacturer, then count the times that manufacturer occurs. Arrange to show most to least
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n()) %>%
arrange(num_planes)
# Group_by manufacturer, then count the times that manufacturer occurs. Arrange to show most to least
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n())
sea_manu <- full_join(flights2, planes2, by = "tailnum")
# remove all NA rows
sea_manu <- sea_manu[complete.cases(sea_manu), ]
sea_manu <- sea_manu %>%
filter(dest == "SEA")
# Group_by manufacturer, then count the times that manufacturer occurs. Arrange to show most to least
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n()) %>%
arrange(num_planes)
sea_manu <- full_join(flights2, planes2, by = "tailnum")
# remove all NA rows
sea_manu <- sea_manu[complete.cases(sea_manu), ]
# Filter data frame to only show dest = SEA
sea_manu <- sea_manu %>%
filter(dest == "SEA")
# Group_by manufacturer, then count the times that manufacturer occurs. Arrange to show most to least
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n()) %>%
arrange(-num_planes)
print(sea_manu)
View(flights)
View(airlines)
View(airports)
View(planes)
colnames(sea_manu$manufacturer)
# select only the columns that I will be using for easier visibility
flights3 <- flights %>%
select(origin, dest, carrier)
View(flights3)
nyc_sea <- full_join(flights3, airlines, by = "carrier")
View(nyc_sea)
# remove all NA
nyc_sea <- nyc_sea[complete.cases(nyc_sea), ]
print(unique(nyc_sea$origin))
print(unique(flights$origin))
View(flights)
flights3 <- flights %>%
select(dest, carrier)
# join the data sets
nyc_sea <- full_join(flights3, airlines, by = "carrier")
# remove all NA
nyc_sea <- nyc_sea[complete.cases(nyc_sea), ]
# filter the results so that dest = SEA
nyc_sea <- nyc_sea %>%
filter(dest == "SEA")
# Summarize results
nyc_sea <- nyc_sea %>%
# group by airline name
group_by(name) %>%
# count the number of times that airline appears
summarise(num_airline = n()) %>%
# arrange so that the top most appears at the top
arrange(-num_airline)
nyc_sea$name[1]
library(nycflights13)
(head(flights))
head(planes)
head(airlines)
# select only the columns that I will be using for easier visibility
flights3 <- flights %>%
select(dest, carrier) # I am not including column "origin" because that lists the AIRPORTS in NYC, NOT the city like I had originally thought
library(dplyr)
library(dplyr)
# select only the columns that I will be using for easier visibility
flights3 <- flights %>%
select(dest, carrier) # I am not including column "origin" because that lists the AIRPORTS in NYC, NOT the city like I had originally thought
# join the data sets
nyc_sea <- full_join(flights3, airlines, by = "carrier")
# remove all NA
nyc_sea <- nyc_sea[complete.cases(nyc_sea), ]
# filter the results so that dest = SEA
nyc_sea <- nyc_sea %>%
filter(dest == "SEA")
# Summarize results
nyc_sea <- nyc_sea %>%
# group by airline name
group_by(name) %>%
# count the number of times that airline appears
summarise(num_airline = n()) %>%
# arrange so that the top most appears at the top
arrange(-num_airline)
library(dplyr)
# select only the columns that I will be using for easier visibility
flights3 <- flights %>%
select(dest, carrier) # I am not including column "origin" because that lists the AIRPORTS in NYC, NOT the city like I had originally thought
# join the data sets
nyc_sea <- full_join(flights3, airlines, by = "carrier")
# remove all NA
nyc_sea <- nyc_sea[complete.cases(nyc_sea), ]
# filter the results so that dest = SEA
nyc_sea <- nyc_sea %>%
filter(dest == "SEA")
# Summarize results
nyc_sea <- nyc_sea %>%
# group by airline name
group_by(name) %>%
# count the number of times that airline appears
summarise(num_airline = n()) %>%
# arrange so that the top most appears at the top
arrange(-num_airline)
View(nyc_sea)
nyc_sea$name
nyc_sea$name[1]
getwd()
library("R.utils")
# gunzip("../data/listings.csv.gz")
# bc the markdown is in the Lab/lab_1 folder, we have to go back
airbnb <- read.csv("../../data/lab_1/listings.csv")
library(knitr)
kable(airbnb[1, ], caption = "First Row of AirBNB dataset")
# use columns "neighborhood" and "host_neighborhood"
# using dplyr
library(dplyr)
library(stringr)
place_host <- airbnb %>%
select(neighbourhood_cleansed, host_neighbourhood, host_id, host_name, host_listings_count)
place_host <- replace(place_host, place_host == '', NA) # added NA to all blank cells
place_host <- place_host[complete.cases(place_host), ] # removed all rows with NA so that there's no false result
# evaluating whether the host lives in the same city as their listing with a new column
place_host <- place_host %>%
mutate(same_city = (neighbourhood_cleansed == host_neighbourhood))
# This variable will contain the TRUE results of hosts who live in AT LEAST ONE of their listings
total_true_listing <- place_host %>%
# Filter rows so that only TRUE shows
filter(same_city == TRUE)  %>%
# Group_by column "host_listings_count" so that it doesn't lose the column
group_by(host_listings_count) %>%
# summarize to only unique "host_id" so that there's no extra data when calculating mean
summarize(unique(host_id))
# This variable will contain the FALSE results for hosts who DO NOT LIVE in the neighborhood of their listings
# Will be a little bit moore difficult because we are removing all unique(host_id) that contain one TRUE
total_false_listing <- place_host %>%
#group_by so that we don't lose the columns
group_by(host_id, host_listings_count) %>%
# summarize to find the number of TRUES in column "same_city"; will create another column
summarize(sum(same_city)) %>%
# renamed it for easier typing
rename("to_remove" = "sum(same_city)") %>%
# filter so that the "to_remove" column only has results of 0 (because if a host_id has a 0, it means that the host_id does NOT live in any of their listings' neighborhoods)
filter(to_remove == 0)
nyc <- read.csv("../../data/lab_1/nyc_airbnb_census_data.csv")
library(readr)
parse_number(nyc$price)
# select pricing and prop_white columns
nyc <- nyc %>%
select(prop_white, price)
# make the scatter plot
nyc_scatter <- nyc %>%
ggplot(aes(prop_white, # x value
price)) + geom_point() # y value + scatter POINT
library(ggplot2)
library(ggplot2)
# select pricing and prop_white columns
nyc <- nyc %>%
select(prop_white, price)
# make the scatter plot
nyc_scatter <- nyc %>%
ggplot(aes(prop_white, # x value
price)) + geom_point() # y value + scatter POINT
# rename axis and add a title
nyc_scatter <- nyc_scatter + labs(
title = "Price of AirBNB vs. Prop. of White People in Population",
y = "Price of AirBNB",
x = "Proportion of White People in Population"
)
print(nyc_scatter)
nyc_full <- read.csv("../../data/lab_1/nyc_airbnb_census_data.csv")
# select relevant variables
data_boxplot <- nyc_full %>%
select(modal_race, price)
# remove all NA rows
data_boxplot <- data_boxplot[complete.cases(data_boxplot), ]
# make the boxplot
nyc_boxplot <- data_boxplot %>%
ggplot(aes(modal_race, # x value
price, # y value
)) + geom_boxplot() +
stat_summary(fun = "mean")
# rename axis and add a title
nyc_boxplot <- nyc_boxplot + labs(
title = "Price of AirBNB vs. Dominant Race in Area",
y = "Price of AirBNB",
x = "Dominant Race in Area"
)
print(nyc_boxplot)
print(nyc_boxplot + ylim(0,300))
# Select the columns you need to work with
total_airbnb <- nyc_full %>%
select(city, total_pop)
# Remove all rows that have NA
total_airbnb <- total_airbnb[complete.cases(total_airbnb), ]
# Make a new table that has total # Airbnb
# I will be doing this by counting the number of occurrences a city has
total_airbnb <- total_airbnb %>%
group_by(city) %>%
summarise(num_airbnb = n(),
total_pop = max(total_pop)) # there were multiple population counts listed for the same city, so I just limited it to the most populated
print(total_airbnb)
library(nycflights13)
(head(flights))
head(planes)
head(airlines)
# Select specific columns in Flights data set so it's easier to see
flights2 <- flights %>%
select(tailnum, origin, dest)
planes2 <- planes %>%
select(tailnum, manufacturer, model)
# Full join both data frames so no information is accidentally lost
sea_manu <- full_join(flights2, planes2, by = "tailnum")
# remove all NA rows
sea_manu <- sea_manu[complete.cases(sea_manu), ]
head(sea_manu)
# Filter data frame to only show dest = SEA
sea_manu <- sea_manu %>%
filter(dest == "SEA")
# Group_by manufacturer, then count the times that manufacturer occurs. Arrange to show most to least
sea_manu <- sea_manu %>%
group_by(manufacturer) %>%
summarize(num_planes = n()) %>%
arrange(-num_planes)
print(sea_manu)
library(dplyr)
# select only the columns that I will be using for easier visibility
flights3 <- flights %>%
select(dest, carrier) # I am not including column "origin" because that lists the AIRPORTS in NYC, NOT the city like I had originally thought
# join the data sets
nyc_sea <- full_join(flights3, airlines, by = "carrier")
# remove all NA
nyc_sea <- nyc_sea[complete.cases(nyc_sea), ]
# filter the results so that dest = SEA
nyc_sea <- nyc_sea %>%
filter(dest == "SEA")
# Summarize results
nyc_sea <- nyc_sea %>%
# group by airline name
group_by(name) %>%
# count the number of times that airline appears
summarise(num_airline = n()) %>%
# arrange so that the top most appears at the top
arrange(-num_airline)
